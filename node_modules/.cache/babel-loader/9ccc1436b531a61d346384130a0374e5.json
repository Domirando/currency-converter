{"ast":null,"code":"import { actionTypes } from \"../action-types\";\nimport axios from \"axios\";\nexport const fetchData = (amount, req_from, to) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: actionTypes.FETCH_WEATHER_REQUEST\n      });\n      let response;\n\n      if (amount && req_from && to) {\n        response = await axios.get(`https://api.fastforex.io/fetch-one?from=${req_from}&to=${to}&api_key=${process.env.API_KEY}`);\n        let item = Object.entries(response).map(item => item); // @ts-ignore\n\n        let item2 = Object.entries(item[0][1].result).map(item => item);\n        let value = item2[0][1];\n        let res = amount * value;\n        dispatch({\n          type: actionTypes.CONVERT,\n          payload: {\n            from: req_from,\n            to: to,\n            converterResult: res\n          }\n        });\n      } else {\n        response = await axios.get(`https://api.fastforex.io/fetch-all?api_key=${process.env.React_App_API_KEY}`);\n        console.log(\"response:\", response.data.results);\n        let items = Object.entries(response.data.results).map(item => item);\n        let to = items.map(item => item[0]);\n        let amount = items.map(item => item[1]);\n        console.log(\"amount\", amount);\n        dispatch({\n          type: actionTypes.FETCH_WEATHER_SUCCESS,\n          payload: {\n            from: response.data.base,\n            to: to,\n            // @ts-ignore\n            response_amount: amount\n          }\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: actionTypes.FETCH_WEATHER_FAILURE,\n        payload: \"ooops, something went wrong!\"\n      });\n    }\n  };\n};","map":{"version":3,"names":["actionTypes","axios","fetchData","amount","req_from","to","dispatch","type","FETCH_WEATHER_REQUEST","response","get","process","env","API_KEY","item","Object","entries","map","item2","result","value","res","CONVERT","payload","from","converterResult","React_App_API_KEY","console","log","data","results","items","FETCH_WEATHER_SUCCESS","base","response_amount","error","FETCH_WEATHER_FAILURE"],"sources":["/home/domirando/Projects/job-tasks/currency-converter/src/state/action-creators/index.ts"],"sourcesContent":["import {actionTypes} from \"../action-types\";\nimport axios from \"axios\";\nimport {Actions} from \"../actions\";\nimport {Dispatch} from \"react\";\n\nexport const fetchData = (amount?: number, req_from?: string, to?: string) => {\n    return async (dispatch: Dispatch<Actions>) => {\n        try {\n            dispatch({type: actionTypes.FETCH_WEATHER_REQUEST})\n            let response: any;\n            if (amount && req_from && to) {\n                response = await axios.get(`https://api.fastforex.io/fetch-one?from=${req_from}&to=${to}&api_key=${process.env.API_KEY}`)\n                let item = Object.entries(response).map(item => item)\n                // @ts-ignore\n                let item2 = Object.entries(item[0][1].result).map(item => item)\n                let value: any = item2[0][1]\n                let res = amount * value\n                dispatch({type: actionTypes.CONVERT, payload: {\n                        from: req_from,\n                        to: to,\n                        converterResult: res\n                    }})\n            }else {\n                response = await axios.get(`https://api.fastforex.io/fetch-all?api_key=${process.env.React_App_API_KEY}`)\n                console.log(\"response:\", response.data.results)\n                let items = Object.entries(response.data.results).map(item => item)\n                let to = items.map(item => item[0])\n                let amount = items.map(item => item[1])\n                console.log(\"amount\", amount)\n                dispatch({type: actionTypes.FETCH_WEATHER_SUCCESS, payload: {\n                        from: response.data.base,\n                        to: to,\n                        // @ts-ignore\n                        response_amount: amount\n                    }})\n            }\n        } catch (error) {\n            dispatch({type: actionTypes.FETCH_WEATHER_FAILURE, payload: \"ooops, something went wrong!\"})\n        }\n    }\n}"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAIA,OAAO,MAAMC,SAAS,GAAG,CAACC,MAAD,EAAkBC,QAAlB,EAAqCC,EAArC,KAAqD;EAC1E,OAAO,MAAOC,QAAP,IAAuC;IAC1C,IAAI;MACAA,QAAQ,CAAC;QAACC,IAAI,EAAEP,WAAW,CAACQ;MAAnB,CAAD,CAAR;MACA,IAAIC,QAAJ;;MACA,IAAIN,MAAM,IAAIC,QAAV,IAAsBC,EAA1B,EAA8B;QAC1BI,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,2CAA0CN,QAAS,OAAMC,EAAG,YAAWM,OAAO,CAACC,GAAR,CAAYC,OAAQ,EAAtG,CAAjB;QACA,IAAIC,IAAI,GAAGC,MAAM,CAACC,OAAP,CAAeP,QAAf,EAAyBQ,GAAzB,CAA6BH,IAAI,IAAIA,IAArC,CAAX,CAF0B,CAG1B;;QACA,IAAII,KAAK,GAAGH,MAAM,CAACC,OAAP,CAAeF,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,EAAWK,MAA1B,EAAkCF,GAAlC,CAAsCH,IAAI,IAAIA,IAA9C,CAAZ;QACA,IAAIM,KAAU,GAAGF,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,CAAjB;QACA,IAAIG,GAAG,GAAGlB,MAAM,GAAGiB,KAAnB;QACAd,QAAQ,CAAC;UAACC,IAAI,EAAEP,WAAW,CAACsB,OAAnB;UAA4BC,OAAO,EAAE;YACtCC,IAAI,EAAEpB,QADgC;YAEtCC,EAAE,EAAEA,EAFkC;YAGtCoB,eAAe,EAAEJ;UAHqB;QAArC,CAAD,CAAR;MAKH,CAZD,MAYM;QACFZ,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAAW,8CAA6CC,OAAO,CAACC,GAAR,CAAYc,iBAAkB,EAAtF,CAAjB;QACAC,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBnB,QAAQ,CAACoB,IAAT,CAAcC,OAAvC;QACA,IAAIC,KAAK,GAAGhB,MAAM,CAACC,OAAP,CAAeP,QAAQ,CAACoB,IAAT,CAAcC,OAA7B,EAAsCb,GAAtC,CAA0CH,IAAI,IAAIA,IAAlD,CAAZ;QACA,IAAIT,EAAE,GAAG0B,KAAK,CAACd,GAAN,CAAUH,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAtB,CAAT;QACA,IAAIX,MAAM,GAAG4B,KAAK,CAACd,GAAN,CAAUH,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAtB,CAAb;QACAa,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBzB,MAAtB;QACAG,QAAQ,CAAC;UAACC,IAAI,EAAEP,WAAW,CAACgC,qBAAnB;UAA0CT,OAAO,EAAE;YACpDC,IAAI,EAAEf,QAAQ,CAACoB,IAAT,CAAcI,IADgC;YAEpD5B,EAAE,EAAEA,EAFgD;YAGpD;YACA6B,eAAe,EAAE/B;UAJmC;QAAnD,CAAD,CAAR;MAMH;IACJ,CA7BD,CA6BE,OAAOgC,KAAP,EAAc;MACZ7B,QAAQ,CAAC;QAACC,IAAI,EAAEP,WAAW,CAACoC,qBAAnB;QAA0Cb,OAAO,EAAE;MAAnD,CAAD,CAAR;IACH;EACJ,CAjCD;AAkCH,CAnCM"},"metadata":{},"sourceType":"module"}