{"ast":null,"code":"import { actionTypes } from \"../action-types\";\nimport axios from \"axios\";\nexport const fetchData = (amount, req_from, to) => {\n  const API_KEY = 'c559a98ce0-4a8821046c-rdgxzw';\n  return async dispatch => {\n    try {\n      dispatch({\n        type: actionTypes.FETCH_WEATHER_REQUEST\n      });\n      let response;\n\n      if (amount && req_from && to) {\n        response = await axios.get(`https://api.fastforex.io/fetch-one?from=${req_from}&to=${to}&api_key=${API_KEY}`);\n        let item = Object.entries(response).map(item => item); // @ts-ignore\n\n        let item2 = Object.entries(item[0][1].result).map(item => item);\n        let value = item2[0][1];\n        let res = amount * value;\n        dispatch({\n          type: actionTypes.CONVERT,\n          payload: {\n            from: req_from,\n            to: to,\n            converterResult: res\n          }\n        });\n      } else {\n        response = await axios.get(`https://api.fastforex.io/fetch-all?api_key=${API_KEY}`);\n        console.log(\"response:\", response.data);\n        let items = Object.entries(response.data.data).map(item => item);\n        let items2 = items.map(item => item[1]); // @ts-ignore\n\n        let items3 = items2.map(item => item); // @ts-ignore\n        // let amount = items2.map(item => item.value)\n\n        console.log(\"amount\", items2);\n        dispatch({\n          type: actionTypes.FETCH_WEATHER_SUCCESS,\n          payload: {\n            from: response.base,\n            to: to,\n            response_amount: amount\n          }\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: actionTypes.FETCH_WEATHER_FAILURE,\n        payload: \"ooops, something went wrong!\"\n      });\n    }\n  };\n};","map":{"version":3,"names":["actionTypes","axios","fetchData","amount","req_from","to","API_KEY","dispatch","type","FETCH_WEATHER_REQUEST","response","get","item","Object","entries","map","item2","result","value","res","CONVERT","payload","from","converterResult","console","log","data","items","items2","items3","FETCH_WEATHER_SUCCESS","base","response_amount","error","FETCH_WEATHER_FAILURE"],"sources":["/home/domirando/Projects/job-tasks/currency-converter/src/state/action-creators/index.ts"],"sourcesContent":["import {actionTypes} from \"../action-types\";\nimport axios from \"axios\";\nimport {Actions} from \"../actions\";\nimport {Dispatch} from \"react\";\n\nexport const fetchData = (amount?: number, req_from?: string, to?: string) => {\n    const API_KEY = 'c559a98ce0-4a8821046c-rdgxzw'\n    return async (dispatch: Dispatch<Actions>) => {\n        try {\n            dispatch({type: actionTypes.FETCH_WEATHER_REQUEST})\n            let response: any;\n            if (amount && req_from && to) {\n                response = await axios.get(`https://api.fastforex.io/fetch-one?from=${req_from}&to=${to}&api_key=${API_KEY}`)\n                let item = Object.entries(response).map(item => item)\n                // @ts-ignore\n                let item2 = Object.entries(item[0][1].result).map(item => item)\n                let value: any = item2[0][1]\n                let res = amount * value\n                dispatch({type: actionTypes.CONVERT, payload: {\n                        from: req_from,\n                        to: to,\n                        converterResult: res\n                    }})\n            }else {\n                response = await axios.get(`https://api.fastforex.io/fetch-all?api_key=${API_KEY}`)\n                console.log(\"response:\", response.data)\n                let items = Object.entries(response.data.data).map(item => item)\n                let items2 = items.map(item => item[1])\n                // @ts-ignore\n                let items3 = items2.map(item => item)\n                // @ts-ignore\n                // let amount = items2.map(item => item.value)\n                console.log(\"amount\", items2)\n                dispatch({type: actionTypes.FETCH_WEATHER_SUCCESS, payload: {\n                        from: response.base,\n                        to: to,\n                        response_amount: amount\n                    }})\n            }\n        } catch (error) {\n            dispatch({type: actionTypes.FETCH_WEATHER_FAILURE, payload: \"ooops, something went wrong!\"})\n        }\n    }\n}"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAIA,OAAO,MAAMC,SAAS,GAAG,CAACC,MAAD,EAAkBC,QAAlB,EAAqCC,EAArC,KAAqD;EAC1E,MAAMC,OAAO,GAAG,8BAAhB;EACA,OAAO,MAAOC,QAAP,IAAuC;IAC1C,IAAI;MACAA,QAAQ,CAAC;QAACC,IAAI,EAAER,WAAW,CAACS;MAAnB,CAAD,CAAR;MACA,IAAIC,QAAJ;;MACA,IAAIP,MAAM,IAAIC,QAAV,IAAsBC,EAA1B,EAA8B;QAC1BK,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAW,2CAA0CP,QAAS,OAAMC,EAAG,YAAWC,OAAQ,EAA1F,CAAjB;QACA,IAAIM,IAAI,GAAGC,MAAM,CAACC,OAAP,CAAeJ,QAAf,EAAyBK,GAAzB,CAA6BH,IAAI,IAAIA,IAArC,CAAX,CAF0B,CAG1B;;QACA,IAAII,KAAK,GAAGH,MAAM,CAACC,OAAP,CAAeF,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,EAAWK,MAA1B,EAAkCF,GAAlC,CAAsCH,IAAI,IAAIA,IAA9C,CAAZ;QACA,IAAIM,KAAU,GAAGF,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,CAAjB;QACA,IAAIG,GAAG,GAAGhB,MAAM,GAAGe,KAAnB;QACAX,QAAQ,CAAC;UAACC,IAAI,EAAER,WAAW,CAACoB,OAAnB;UAA4BC,OAAO,EAAE;YACtCC,IAAI,EAAElB,QADgC;YAEtCC,EAAE,EAAEA,EAFkC;YAGtCkB,eAAe,EAAEJ;UAHqB;QAArC,CAAD,CAAR;MAKH,CAZD,MAYM;QACFT,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAW,8CAA6CL,OAAQ,EAAhE,CAAjB;QACAkB,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBf,QAAQ,CAACgB,IAAlC;QACA,IAAIC,KAAK,GAAGd,MAAM,CAACC,OAAP,CAAeJ,QAAQ,CAACgB,IAAT,CAAcA,IAA7B,EAAmCX,GAAnC,CAAuCH,IAAI,IAAIA,IAA/C,CAAZ;QACA,IAAIgB,MAAM,GAAGD,KAAK,CAACZ,GAAN,CAAUH,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAtB,CAAb,CAJE,CAKF;;QACA,IAAIiB,MAAM,GAAGD,MAAM,CAACb,GAAP,CAAWH,IAAI,IAAIA,IAAnB,CAAb,CANE,CAOF;QACA;;QACAY,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBG,MAAtB;QACArB,QAAQ,CAAC;UAACC,IAAI,EAAER,WAAW,CAAC8B,qBAAnB;UAA0CT,OAAO,EAAE;YACpDC,IAAI,EAAEZ,QAAQ,CAACqB,IADqC;YAEpD1B,EAAE,EAAEA,EAFgD;YAGpD2B,eAAe,EAAE7B;UAHmC;QAAnD,CAAD,CAAR;MAKH;IACJ,CA/BD,CA+BE,OAAO8B,KAAP,EAAc;MACZ1B,QAAQ,CAAC;QAACC,IAAI,EAAER,WAAW,CAACkC,qBAAnB;QAA0Cb,OAAO,EAAE;MAAnD,CAAD,CAAR;IACH;EACJ,CAnCD;AAoCH,CAtCM"},"metadata":{},"sourceType":"module"}